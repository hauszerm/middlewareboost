//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BoostMiddlewareImporter.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        /// <summary>
        /// PERF; number of concurrent threads to transform the messages
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; number of concurrent threads to transform the messages")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int MaxDegreeOfParallelism {
            get {
                return ((int)(this["MaxDegreeOfParallelism"]));
            }
        }
        
        /// <summary>
        /// PERF; SQLServer/RavenDB, chunk a batch by this number of records and send them to db even when batch has not finished yet
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; SQLServer/RavenDB, chunk a batch by this number of records and send them to" +
            " db even when batch has not finished yet")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5000")]
        public int TableBulkBatchSize {
            get {
                return ((int)(this["TableBulkBatchSize"]));
            }
        }
        
        /// <summary>
        /// PERF; Task Priority of the db-insert-task when scheduled on the default thread pool
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; Task Priority of the db-insert-task when scheduled on the default thread po" +
            "ol")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int ThreadPoolPriority_DBInsert {
            get {
                return ((int)(this["ThreadPoolPriority_DBInsert"]));
            }
        }
        
        /// <summary>
        /// PERF; task priority of the message transformation task scheduled on the default thread pool
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; task priority of the message transformation task scheduled on the default t" +
            "hread pool")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int ThreadPoolPriority_Transformation {
            get {
                return ((int)(this["ThreadPoolPriority_Transformation"]));
            }
        }
        
        /// <summary>
        /// PERF; task priority of the tcp server tasks scheduled on the default thread pool
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; task priority of the tcp server tasks scheduled on the default thread pool")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        public int TreadPoolPriority_TCPServer {
            get {
                return ((int)(this["TreadPoolPriority_TCPServer"]));
            }
        }
        
        /// <summary>
        /// UI; interval of messages per client that trigger statistics generation, use low value when the tcp client does not send a message per second
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("UI; interval of messages per client that trigger statistics generation, use low v" +
            "alue when the tcp client does not send a message per second")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        public int TCPServer_StatisticsPerMessagesCount {
            get {
                return ((int)(this["TCPServer_StatisticsPerMessagesCount"]));
            }
        }
        
        /// <summary>
        /// when false, the received messages are not sent to the next hop
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("when false, the received messages are not sent to the next hop")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool TCPServer_PostMessageToNextBlock {
            get {
                return ((bool)(this["TCPServer_PostMessageToNextBlock"]));
            }
        }
        
        /// <summary>
        /// PERF; when false, the db-insert-tasks schedules on a thread with highest priority
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; when false, the db-insert-tasks schedules on a thread with highest priority" +
            "")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ThreadPoolForDBInsert {
            get {
                return ((bool)(this["ThreadPoolForDBInsert"]));
            }
        }
        
        /// <summary>
        /// PERF; If False, the TCP Servers schedules on Tasks on threads with lowest priority
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; If False, the TCP Servers schedules on Tasks on threads with lowest priorit" +
            "y")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool TCPServer_UseThreadPool {
            get {
                return ((bool)(this["TCPServer_UseThreadPool"]));
            }
        }
        
        /// <summary>
        /// DUR; Size of the buffer of each TPLDataflow block
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("DUR; Size of the buffer of each TPLDataflow block")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("120000")]
        public int BoundedCapacity {
            get {
                return ((int)(this["BoundedCapacity"]));
            }
        }
        
        /// <summary>
        /// configuration for the cyclicdata generator is read from this file
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("configuration for the cyclicdata generator is read from this file")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cyclicData.csv")]
        public string CyclicDataFile {
            get {
                return ((string)(this["CyclicDataFile"]));
            }
        }
        
        /// <summary>
        /// configuration for the perioddata generator is read from this file
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("configuration for the perioddata generator is read from this file")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cyclicDataPeriod.csv")]
        public string CyclicDataFilePeriod {
            get {
                return ((string)(this["CyclicDataFilePeriod"]));
            }
        }
        
        /// <summary>
        /// PERF; Number of concurrent threads that bulkinsert the messages in the database, keep to 1 for Cassandra and RavenDB (DB Access API might not be threadsafe)
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; Number of concurrent threads that bulkinsert the messages in the database, " +
            "keep to 1 for Cassandra and RavenDB (DB Access API might not be threadsafe)")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        public int MaxDegreeOfParallelismDBInsert {
            get {
                return ((int)(this["MaxDegreeOfParallelismDBInsert"]));
            }
        }
        
        /// <summary>
        /// PERF; Group this number of records before starting a bulk insert, use max 2000 for cassandra because the byte-size of a batch request is limited https://issues.apache.org/jira/browse/CASSANDRA-6487
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("PERF; Group this number of records before starting a bulk insert, use max 2000 fo" +
            "r cassandra because the byte-size of a batch request is limited https://issues.a" +
            "pache.org/jira/browse/CASSANDRA-6487")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("200")]
        public int TableBulkInsertSize {
            get {
                return ((int)(this["TableBulkInsertSize"]));
            }
        }
        
        /// <summary>
        /// max size of the input queue of the db import action
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("max size of the input queue of the db import action")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("150")]
        public int BoundedCapacity_DbInsert {
            get {
                return ((int)(this["BoundedCapacity_DbInsert"]));
            }
        }
        
        /// <summary>
        /// When using the PeriodMessageGenerator, define the number of minutes that should be generated
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("When using the PeriodMessageGenerator, define the number of minutes that should b" +
            "e generated")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1440")]
        public int CyclicPeriodDurationMinutes {
            get {
                return ((int)(this["CyclicPeriodDurationMinutes"]));
            }
        }
        
        /// <summary>
        /// number of parallel task triggering the calculation of averaging the documents
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("number of parallel task triggering the calculation of averaging the documents")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int MaxDegreeOfParallelismAvgCalc {
            get {
                return ((int)(this["MaxDegreeOfParallelismAvgCalc"]));
            }
        }
        
        /// <summary>
        /// number of messages to cache for showing every second
        /// </summary>
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("number of messages to cache for showing every second")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        public int LoggingMessageCacheSize {
            get {
                return ((int)(this["LoggingMessageCacheSize"]));
            }
        }
    }
}
